//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAlunosClient {
    salvar(request: AlunoSalvarCommand): Observable<number>;
    obterPorId(id: number): Observable<AlunoObterPorIdDto>;
    obter(query: AlunoObterQuery): Observable<PaginatedListOfAlunoObterDto>;
    excluir(id: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class AlunosClient implements IAlunosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    salvar(request: AlunoSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Alunos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvar(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterPorId(id: number): Observable<AlunoObterPorIdDto> {
        let url_ = this.baseUrl + "/api/Alunos/obter-por-id/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AlunoObterPorIdDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AlunoObterPorIdDto>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<AlunoObterPorIdDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AlunoObterPorIdDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obter(query: AlunoObterQuery): Observable<PaginatedListOfAlunoObterDto> {
        let url_ = this.baseUrl + "/api/Alunos/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfAlunoObterDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfAlunoObterDto>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfAlunoObterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfAlunoObterDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    excluir(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Alunos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAuthClient {
    login(user: LoginModel): Observable<LoginModelOutput>;
    validarToken(model: ValidateTokenModel): Observable<boolean>;
}

@Injectable({
    providedIn: 'root'
})
export class AuthClient implements IAuthClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    login(user: LoginModel): Observable<LoginModelOutput> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoginModelOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoginModelOutput>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<LoginModelOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginModelOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    validarToken(model: ValidateTokenModel): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Auth/validar-token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processValidarToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processValidarToken(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processValidarToken(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAvaliacoesClient {
    salvar(request: AvaliacaoSalvarCommand): Observable<number>;
    obterPorId(id: number): Observable<AvaliacaoObterPorIdDto>;
    obter(query: AvaliacaoObterQuery): Observable<PaginatedListOfAvaliacaoObterDto>;
    excluir(id: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class AvaliacoesClient implements IAvaliacoesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    salvar(request: AvaliacaoSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Avaliacoes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvar(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterPorId(id: number): Observable<AvaliacaoObterPorIdDto> {
        let url_ = this.baseUrl + "/api/Avaliacoes/obter-por-id/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AvaliacaoObterPorIdDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AvaliacaoObterPorIdDto>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<AvaliacaoObterPorIdDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AvaliacaoObterPorIdDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obter(query: AvaliacaoObterQuery): Observable<PaginatedListOfAvaliacaoObterDto> {
        let url_ = this.baseUrl + "/api/Avaliacoes/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfAvaliacaoObterDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfAvaliacaoObterDto>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfAvaliacaoObterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfAvaliacaoObterDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    excluir(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Avaliacoes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ICursosClient {
    salvar(request: CursoSalvarCommand): Observable<number>;
    obterPorId(id: number): Observable<CursoObterPorIdDto>;
    obter(query: CursoObterQuery): Observable<PaginatedListOfCursoObterDto>;
    excluir(id: number): Observable<FileResponse>;
    obterResumo(nomeCurso: string | null | undefined): Observable<CursoObterResumoDto>;
}

@Injectable({
    providedIn: 'root'
})
export class CursosClient implements ICursosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    salvar(request: CursoSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Cursos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvar(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterPorId(id: number): Observable<CursoObterPorIdDto> {
        let url_ = this.baseUrl + "/api/Cursos/obter-por-id/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CursoObterPorIdDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CursoObterPorIdDto>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<CursoObterPorIdDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CursoObterPorIdDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obter(query: CursoObterQuery): Observable<PaginatedListOfCursoObterDto> {
        let url_ = this.baseUrl + "/api/Cursos/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfCursoObterDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfCursoObterDto>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfCursoObterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfCursoObterDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    excluir(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Cursos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterResumo(nomeCurso: string | null | undefined): Observable<CursoObterResumoDto> {
        let url_ = this.baseUrl + "/api/Cursos/obter-resumo?";
        if (nomeCurso !== undefined && nomeCurso !== null)
            url_ += "nomeCurso=" + encodeURIComponent("" + nomeCurso) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterResumo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterResumo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CursoObterResumoDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CursoObterResumoDto>;
        }));
    }

    protected processObterResumo(response: HttpResponseBase): Observable<CursoObterResumoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CursoObterResumoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDepartamentosClient {
    salvar(request: DepartamentoSalvarCommand): Observable<number>;
    obterPorId(id: number): Observable<DepartamentoObterPorIdDto>;
    obter(query: DepartamentoObterQuery): Observable<PaginatedListOfDepartamentoObterDto>;
    excluir(id: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class DepartamentosClient implements IDepartamentosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    salvar(request: DepartamentoSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Departamentos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvar(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterPorId(id: number): Observable<DepartamentoObterPorIdDto> {
        let url_ = this.baseUrl + "/api/Departamentos/obter-por-id/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DepartamentoObterPorIdDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DepartamentoObterPorIdDto>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<DepartamentoObterPorIdDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DepartamentoObterPorIdDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obter(query: DepartamentoObterQuery): Observable<PaginatedListOfDepartamentoObterDto> {
        let url_ = this.baseUrl + "/api/Departamentos/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfDepartamentoObterDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfDepartamentoObterDto>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfDepartamentoObterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfDepartamentoObterDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    excluir(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Departamentos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDisciplinasClient {
    salvar(request: DisciplinaSalvarCommand): Observable<number>;
    obterPorId(id: number): Observable<DisciplinaObterPorIdDto>;
    obter(query: DisciplinaObterQuery): Observable<PaginatedListOfDisciplinaObterDto>;
    excluir(id: number): Observable<FileResponse>;
    obterTodasRdfXml(): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class DisciplinasClient implements IDisciplinasClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    salvar(request: DisciplinaSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Disciplinas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvar(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterPorId(id: number): Observable<DisciplinaObterPorIdDto> {
        let url_ = this.baseUrl + "/api/Disciplinas/obter-por-id/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DisciplinaObterPorIdDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DisciplinaObterPorIdDto>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<DisciplinaObterPorIdDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DisciplinaObterPorIdDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obter(query: DisciplinaObterQuery): Observable<PaginatedListOfDisciplinaObterDto> {
        let url_ = this.baseUrl + "/api/Disciplinas/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfDisciplinaObterDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfDisciplinaObterDto>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfDisciplinaObterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfDisciplinaObterDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    excluir(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Disciplinas/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterTodasRdfXml(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Disciplinas/rdf";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterTodasRdfXml(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterTodasRdfXml(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processObterTodasRdfXml(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IMatriculasClient {
    realizarMatricula(request: MatriculaRealizarCommand): Observable<number>;
    obterPorId(id: number): Observable<MatriculaObterPorIdDto>;
    obter(query: MatriculaObterQuery): Observable<PaginatedListOfMatriculaObterDto>;
    excluir(id: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class MatriculasClient implements IMatriculasClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    realizarMatricula(request: MatriculaRealizarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Matriculas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRealizarMatricula(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRealizarMatricula(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processRealizarMatricula(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterPorId(id: number): Observable<MatriculaObterPorIdDto> {
        let url_ = this.baseUrl + "/api/Matriculas/obter-por-id/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MatriculaObterPorIdDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MatriculaObterPorIdDto>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<MatriculaObterPorIdDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MatriculaObterPorIdDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obter(query: MatriculaObterQuery): Observable<PaginatedListOfMatriculaObterDto> {
        let url_ = this.baseUrl + "/api/Matriculas/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfMatriculaObterDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfMatriculaObterDto>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfMatriculaObterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfMatriculaObterDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    excluir(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Matriculas/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface INotasClient {
    salvar(request: NotaSalvarCommand): Observable<number>;
    obterPorId(id: number): Observable<NotaObterPorIdDto>;
    obter(query: NotaObterQuery): Observable<PaginatedListOfNotaObterDto>;
    excluir(id: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class NotasClient implements INotasClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    salvar(request: NotaSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Notas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvar(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterPorId(id: number): Observable<NotaObterPorIdDto> {
        let url_ = this.baseUrl + "/api/Notas/obter-por-id/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NotaObterPorIdDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NotaObterPorIdDto>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<NotaObterPorIdDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NotaObterPorIdDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obter(query: NotaObterQuery): Observable<PaginatedListOfNotaObterDto> {
        let url_ = this.baseUrl + "/api/Notas/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfNotaObterDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfNotaObterDto>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfNotaObterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfNotaObterDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    excluir(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Notas/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IProfessoresClient {
    salvar(request: ProfessorSalvarCommand): Observable<number>;
    obterPorId(id: number): Observable<ProfessorObterPorIdDto>;
    obter(query: ProfessorObterQuery): Observable<PaginatedListOfProfessorObterDto>;
    excluir(id: number): Observable<FileResponse>;
    obterEspecializacoes(): Observable<SelectItemEnum[]>;
}

@Injectable({
    providedIn: 'root'
})
export class ProfessoresClient implements IProfessoresClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    salvar(request: ProfessorSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Professores";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvar(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterPorId(id: number): Observable<ProfessorObterPorIdDto> {
        let url_ = this.baseUrl + "/api/Professores/obter-por-id/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProfessorObterPorIdDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProfessorObterPorIdDto>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<ProfessorObterPorIdDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProfessorObterPorIdDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obter(query: ProfessorObterQuery): Observable<PaginatedListOfProfessorObterDto> {
        let url_ = this.baseUrl + "/api/Professores/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfProfessorObterDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfProfessorObterDto>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfProfessorObterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfProfessorObterDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    excluir(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Professores/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterEspecializacoes(): Observable<SelectItemEnum[]> {
        let url_ = this.baseUrl + "/api/Professores/especializacoes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterEspecializacoes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterEspecializacoes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectItemEnum[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectItemEnum[]>;
        }));
    }

    protected processObterEspecializacoes(response: HttpResponseBase): Observable<SelectItemEnum[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectItemEnum.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ITurmasClient {
    salvar(request: TurmaSalvarCommand): Observable<number>;
    obterPorId(id: number): Observable<TurmaObterPorIdDto>;
    obter(query: TurmaObterQuery): Observable<PaginatedListOfTurmaObterDto>;
    excluir(id: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class TurmasClient implements ITurmasClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    salvar(request: TurmaSalvarCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Turmas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalvar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalvar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSalvar(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterPorId(id: number): Observable<TurmaObterPorIdDto> {
        let url_ = this.baseUrl + "/api/Turmas/obter-por-id/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TurmaObterPorIdDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TurmaObterPorIdDto>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<TurmaObterPorIdDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TurmaObterPorIdDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obter(query: TurmaObterQuery): Observable<PaginatedListOfTurmaObterDto> {
        let url_ = this.baseUrl + "/api/Turmas/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfTurmaObterDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfTurmaObterDto>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfTurmaObterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfTurmaObterDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    excluir(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Turmas/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUsuariosClient {
    obterPorId(id: number): Observable<UsuarioDto>;
    excluir(id: number): Observable<FileResponse>;
    obter(query: UsuarioObterQuery): Observable<PaginatedListOfUsuarioDto>;
    criar(command: UsuarioCriarCommand): Observable<UsuarioDto>;
    alterar(command: UsuarioAlterarCommand): Observable<UsuarioDto>;
    obterTipos(): Observable<SelectItemEnum[]>;
}

@Injectable({
    providedIn: 'root'
})
export class UsuariosClient implements IUsuariosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    obterPorId(id: number): Observable<UsuarioDto> {
        let url_ = this.baseUrl + "/api/Usuarios/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterPorId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterPorId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UsuarioDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UsuarioDto>;
        }));
    }

    protected processObterPorId(response: HttpResponseBase): Observable<UsuarioDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsuarioDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    excluir(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Usuarios/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExcluir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExcluir(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processExcluir(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obter(query: UsuarioObterQuery): Observable<PaginatedListOfUsuarioDto> {
        let url_ = this.baseUrl + "/api/Usuarios/obter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfUsuarioDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfUsuarioDto>;
        }));
    }

    protected processObter(response: HttpResponseBase): Observable<PaginatedListOfUsuarioDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfUsuarioDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    criar(command: UsuarioCriarCommand): Observable<UsuarioDto> {
        let url_ = this.baseUrl + "/api/Usuarios";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UsuarioDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UsuarioDto>;
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<UsuarioDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsuarioDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    alterar(command: UsuarioAlterarCommand): Observable<UsuarioDto> {
        let url_ = this.baseUrl + "/api/Usuarios";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAlterar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAlterar(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UsuarioDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UsuarioDto>;
        }));
    }

    protected processAlterar(response: HttpResponseBase): Observable<UsuarioDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsuarioDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    obterTipos(): Observable<SelectItemEnum[]> {
        let url_ = this.baseUrl + "/api/Usuarios/tipos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processObterTipos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processObterTipos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectItemEnum[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectItemEnum[]>;
        }));
    }

    protected processObterTipos(response: HttpResponseBase): Observable<SelectItemEnum[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectItemEnum.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AlunoSalvarCommand implements IAlunoSalvarCommand {
    id?: number | undefined;
    matricula?: string | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    usuarioId?: number | undefined;
    cursoId?: number;

    constructor(data?: IAlunoSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.matricula = _data["matricula"];
            this.nome = _data["nome"];
            this.cpf = _data["cpf"];
            this.usuarioId = _data["usuarioId"];
            this.cursoId = _data["cursoId"];
        }
    }

    static fromJS(data: any): AlunoSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AlunoSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["matricula"] = this.matricula;
        data["nome"] = this.nome;
        data["cpf"] = this.cpf;
        data["usuarioId"] = this.usuarioId;
        data["cursoId"] = this.cursoId;
        return data;
    }
}

export interface IAlunoSalvarCommand {
    id?: number | undefined;
    matricula?: string | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    usuarioId?: number | undefined;
    cursoId?: number;
}

export class AlunoObterPorIdDto implements IAlunoObterPorIdDto {
    id?: number;
    matricula?: string | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    usuarioId?: number | undefined;
    cursoId?: number;

    constructor(data?: IAlunoObterPorIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.matricula = _data["matricula"];
            this.nome = _data["nome"];
            this.cpf = _data["cpf"];
            this.usuarioId = _data["usuarioId"];
            this.cursoId = _data["cursoId"];
        }
    }

    static fromJS(data: any): AlunoObterPorIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new AlunoObterPorIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["matricula"] = this.matricula;
        data["nome"] = this.nome;
        data["cpf"] = this.cpf;
        data["usuarioId"] = this.usuarioId;
        data["cursoId"] = this.cursoId;
        return data;
    }
}

export interface IAlunoObterPorIdDto {
    id?: number;
    matricula?: string | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    usuarioId?: number | undefined;
    cursoId?: number;
}

export class PaginatedListOfAlunoObterDto implements IPaginatedListOfAlunoObterDto {
    items?: AlunoObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfAlunoObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AlunoObterDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfAlunoObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfAlunoObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfAlunoObterDto {
    items?: AlunoObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class AlunoObterDto implements IAlunoObterDto {
    id?: number;
    matricula?: string | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    usuarioId?: number | undefined;
    cursoId?: number;

    constructor(data?: IAlunoObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.matricula = _data["matricula"];
            this.nome = _data["nome"];
            this.cpf = _data["cpf"];
            this.usuarioId = _data["usuarioId"];
            this.cursoId = _data["cursoId"];
        }
    }

    static fromJS(data: any): AlunoObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new AlunoObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["matricula"] = this.matricula;
        data["nome"] = this.nome;
        data["cpf"] = this.cpf;
        data["usuarioId"] = this.usuarioId;
        data["cursoId"] = this.cursoId;
        return data;
    }
}

export interface IAlunoObterDto {
    id?: number;
    matricula?: string | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    usuarioId?: number | undefined;
    cursoId?: number;
}

export class QueryRequestBase implements IQueryRequestBase {
    pageSize?: number;
    pageIndex?: number;
    sortField?: string | undefined;
    sortOrder?: string | undefined;
    quickSearchTerm?: string | undefined;
    selectFields?: string[] | undefined;

    constructor(data?: IQueryRequestBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["pageSize"];
            this.pageIndex = _data["pageIndex"];
            this.sortField = _data["sortField"];
            this.sortOrder = _data["sortOrder"];
            this.quickSearchTerm = _data["quickSearchTerm"];
            if (Array.isArray(_data["selectFields"])) {
                this.selectFields = [] as any;
                for (let item of _data["selectFields"])
                    this.selectFields!.push(item);
            }
        }
    }

    static fromJS(data: any): QueryRequestBase {
        data = typeof data === 'object' ? data : {};
        let result = new QueryRequestBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageSize"] = this.pageSize;
        data["pageIndex"] = this.pageIndex;
        data["sortField"] = this.sortField;
        data["sortOrder"] = this.sortOrder;
        data["quickSearchTerm"] = this.quickSearchTerm;
        if (Array.isArray(this.selectFields)) {
            data["selectFields"] = [];
            for (let item of this.selectFields)
                data["selectFields"].push(item);
        }
        return data;
    }
}

export interface IQueryRequestBase {
    pageSize?: number;
    pageIndex?: number;
    sortField?: string | undefined;
    sortOrder?: string | undefined;
    quickSearchTerm?: string | undefined;
    selectFields?: string[] | undefined;
}

export class AlunoObterQuery extends QueryRequestBase implements IAlunoObterQuery {
    id?: number | undefined;
    matricula?: string | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    usuarioId?: number | undefined;
    cursoId?: number | undefined;

    constructor(data?: IAlunoObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.matricula = _data["matricula"];
            this.nome = _data["nome"];
            this.cpf = _data["cpf"];
            this.usuarioId = _data["usuarioId"];
            this.cursoId = _data["cursoId"];
        }
    }

    static fromJS(data: any): AlunoObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new AlunoObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["matricula"] = this.matricula;
        data["nome"] = this.nome;
        data["cpf"] = this.cpf;
        data["usuarioId"] = this.usuarioId;
        data["cursoId"] = this.cursoId;
        super.toJSON(data);
        return data;
    }
}

export interface IAlunoObterQuery extends IQueryRequestBase {
    id?: number | undefined;
    matricula?: string | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    usuarioId?: number | undefined;
    cursoId?: number | undefined;
}

export class LoginModelOutput implements ILoginModelOutput {
    accessToken?: string | undefined;
    refreshToken?: string | undefined;

    constructor(data?: ILoginModelOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): LoginModelOutput {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModelOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken;
        return data;
    }
}

export interface ILoginModelOutput {
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
}

export class LoginModel implements ILoginModel {
    login?: string | undefined;
    senha?: string | undefined;
    clienteId?: number | undefined;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.senha = _data["senha"];
            this.clienteId = _data["clienteId"];
        }
    }

    static fromJS(data: any): LoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["senha"] = this.senha;
        data["clienteId"] = this.clienteId;
        return data;
    }
}

export interface ILoginModel {
    login?: string | undefined;
    senha?: string | undefined;
    clienteId?: number | undefined;
}

export class ValidateTokenModel implements IValidateTokenModel {
    token?: string | undefined;

    constructor(data?: IValidateTokenModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): ValidateTokenModel {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateTokenModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface IValidateTokenModel {
    token?: string | undefined;
}

export class AvaliacaoSalvarCommand implements IAvaliacaoSalvarCommand {
    id?: number | undefined;
    nome?: string | undefined;
    peso?: number;
    turmaId?: number;

    constructor(data?: IAvaliacaoSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.peso = _data["peso"];
            this.turmaId = _data["turmaId"];
        }
    }

    static fromJS(data: any): AvaliacaoSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AvaliacaoSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["peso"] = this.peso;
        data["turmaId"] = this.turmaId;
        return data;
    }
}

export interface IAvaliacaoSalvarCommand {
    id?: number | undefined;
    nome?: string | undefined;
    peso?: number;
    turmaId?: number;
}

export class AvaliacaoObterPorIdDto implements IAvaliacaoObterPorIdDto {
    id?: number;
    nome?: string | undefined;
    peso?: number;
    turmaId?: number;

    constructor(data?: IAvaliacaoObterPorIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.peso = _data["peso"];
            this.turmaId = _data["turmaId"];
        }
    }

    static fromJS(data: any): AvaliacaoObterPorIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new AvaliacaoObterPorIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["peso"] = this.peso;
        data["turmaId"] = this.turmaId;
        return data;
    }
}

export interface IAvaliacaoObterPorIdDto {
    id?: number;
    nome?: string | undefined;
    peso?: number;
    turmaId?: number;
}

export class PaginatedListOfAvaliacaoObterDto implements IPaginatedListOfAvaliacaoObterDto {
    items?: AvaliacaoObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfAvaliacaoObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AvaliacaoObterDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfAvaliacaoObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfAvaliacaoObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfAvaliacaoObterDto {
    items?: AvaliacaoObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class AvaliacaoObterDto implements IAvaliacaoObterDto {
    id?: number;
    nome?: string | undefined;
    peso?: number;
    turmaId?: number;

    constructor(data?: IAvaliacaoObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.peso = _data["peso"];
            this.turmaId = _data["turmaId"];
        }
    }

    static fromJS(data: any): AvaliacaoObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new AvaliacaoObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["peso"] = this.peso;
        data["turmaId"] = this.turmaId;
        return data;
    }
}

export interface IAvaliacaoObterDto {
    id?: number;
    nome?: string | undefined;
    peso?: number;
    turmaId?: number;
}

export class AvaliacaoObterQuery extends QueryRequestBase implements IAvaliacaoObterQuery {
    id?: number | undefined;
    nome?: string | undefined;
    peso?: number | undefined;
    turmaId?: number | undefined;

    constructor(data?: IAvaliacaoObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.peso = _data["peso"];
            this.turmaId = _data["turmaId"];
        }
    }

    static fromJS(data: any): AvaliacaoObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new AvaliacaoObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["peso"] = this.peso;
        data["turmaId"] = this.turmaId;
        super.toJSON(data);
        return data;
    }
}

export interface IAvaliacaoObterQuery extends IQueryRequestBase {
    id?: number | undefined;
    nome?: string | undefined;
    peso?: number | undefined;
    turmaId?: number | undefined;
}

export class CursoSalvarCommand implements ICursoSalvarCommand {
    id?: number | undefined;
    nome?: string | undefined;
    duracaoSemestres?: number;

    constructor(data?: ICursoSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.duracaoSemestres = _data["duracaoSemestres"];
        }
    }

    static fromJS(data: any): CursoSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CursoSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["duracaoSemestres"] = this.duracaoSemestres;
        return data;
    }
}

export interface ICursoSalvarCommand {
    id?: number | undefined;
    nome?: string | undefined;
    duracaoSemestres?: number;
}

export class CursoObterPorIdDto implements ICursoObterPorIdDto {
    id?: number;
    nome?: string | undefined;
    duracaoSemestres?: number;

    constructor(data?: ICursoObterPorIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.duracaoSemestres = _data["duracaoSemestres"];
        }
    }

    static fromJS(data: any): CursoObterPorIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new CursoObterPorIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["duracaoSemestres"] = this.duracaoSemestres;
        return data;
    }
}

export interface ICursoObterPorIdDto {
    id?: number;
    nome?: string | undefined;
    duracaoSemestres?: number;
}

export class PaginatedListOfCursoObterDto implements IPaginatedListOfCursoObterDto {
    items?: CursoObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfCursoObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CursoObterDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfCursoObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfCursoObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfCursoObterDto {
    items?: CursoObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class CursoObterDto implements ICursoObterDto {
    id?: number;
    nome?: string | undefined;
    duracaoSemestres?: number;

    constructor(data?: ICursoObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.duracaoSemestres = _data["duracaoSemestres"];
        }
    }

    static fromJS(data: any): CursoObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new CursoObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["duracaoSemestres"] = this.duracaoSemestres;
        return data;
    }
}

export interface ICursoObterDto {
    id?: number;
    nome?: string | undefined;
    duracaoSemestres?: number;
}

export class CursoObterQuery extends QueryRequestBase implements ICursoObterQuery {
    id?: number | undefined;
    nome?: string | undefined;
    duracaoSemestres?: number | undefined;

    constructor(data?: ICursoObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.duracaoSemestres = _data["duracaoSemestres"];
        }
    }

    static fromJS(data: any): CursoObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new CursoObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["duracaoSemestres"] = this.duracaoSemestres;
        super.toJSON(data);
        return data;
    }
}

export interface ICursoObterQuery extends IQueryRequestBase {
    id?: number | undefined;
    nome?: string | undefined;
    duracaoSemestres?: number | undefined;
}

export class CursoObterResumoDto implements ICursoObterResumoDto {
    nomeCurso?: string | undefined;
    resumo?: string | undefined;

    constructor(data?: ICursoObterResumoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nomeCurso = _data["nomeCurso"];
            this.resumo = _data["resumo"];
        }
    }

    static fromJS(data: any): CursoObterResumoDto {
        data = typeof data === 'object' ? data : {};
        let result = new CursoObterResumoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nomeCurso"] = this.nomeCurso;
        data["resumo"] = this.resumo;
        return data;
    }
}

export interface ICursoObterResumoDto {
    nomeCurso?: string | undefined;
    resumo?: string | undefined;
}

export class DepartamentoSalvarCommand implements IDepartamentoSalvarCommand {
    id?: number | undefined;
    nome?: string | undefined;

    constructor(data?: IDepartamentoSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): DepartamentoSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DepartamentoSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        return data;
    }
}

export interface IDepartamentoSalvarCommand {
    id?: number | undefined;
    nome?: string | undefined;
}

export class DepartamentoObterPorIdDto implements IDepartamentoObterPorIdDto {
    id?: number;
    nome?: string | undefined;

    constructor(data?: IDepartamentoObterPorIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): DepartamentoObterPorIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new DepartamentoObterPorIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        return data;
    }
}

export interface IDepartamentoObterPorIdDto {
    id?: number;
    nome?: string | undefined;
}

export class PaginatedListOfDepartamentoObterDto implements IPaginatedListOfDepartamentoObterDto {
    items?: DepartamentoObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfDepartamentoObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DepartamentoObterDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfDepartamentoObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfDepartamentoObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfDepartamentoObterDto {
    items?: DepartamentoObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class DepartamentoObterDto implements IDepartamentoObterDto {
    id?: number;
    nome?: string | undefined;

    constructor(data?: IDepartamentoObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): DepartamentoObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new DepartamentoObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        return data;
    }
}

export interface IDepartamentoObterDto {
    id?: number;
    nome?: string | undefined;
}

export class DepartamentoObterQuery extends QueryRequestBase implements IDepartamentoObterQuery {
    id?: number | undefined;
    nome?: string | undefined;

    constructor(data?: IDepartamentoObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): DepartamentoObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new DepartamentoObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        super.toJSON(data);
        return data;
    }
}

export interface IDepartamentoObterQuery extends IQueryRequestBase {
    id?: number | undefined;
    nome?: string | undefined;
}

export class DisciplinaSalvarCommand implements IDisciplinaSalvarCommand {
    id?: number | undefined;
    nome?: string | undefined;
    codigo?: string | undefined;
    cargaHoraria?: number;
    ementa?: string | undefined;
    cursoId?: number;

    constructor(data?: IDisciplinaSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.codigo = _data["codigo"];
            this.cargaHoraria = _data["cargaHoraria"];
            this.ementa = _data["ementa"];
            this.cursoId = _data["cursoId"];
        }
    }

    static fromJS(data: any): DisciplinaSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DisciplinaSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["codigo"] = this.codigo;
        data["cargaHoraria"] = this.cargaHoraria;
        data["ementa"] = this.ementa;
        data["cursoId"] = this.cursoId;
        return data;
    }
}

export interface IDisciplinaSalvarCommand {
    id?: number | undefined;
    nome?: string | undefined;
    codigo?: string | undefined;
    cargaHoraria?: number;
    ementa?: string | undefined;
    cursoId?: number;
}

export class DisciplinaObterPorIdDto implements IDisciplinaObterPorIdDto {
    id?: number;
    nome?: string | undefined;
    codigo?: string | undefined;
    cargaHoraria?: number;
    ementa?: string | undefined;
    cursoId?: number;

    constructor(data?: IDisciplinaObterPorIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.codigo = _data["codigo"];
            this.cargaHoraria = _data["cargaHoraria"];
            this.ementa = _data["ementa"];
            this.cursoId = _data["cursoId"];
        }
    }

    static fromJS(data: any): DisciplinaObterPorIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new DisciplinaObterPorIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["codigo"] = this.codigo;
        data["cargaHoraria"] = this.cargaHoraria;
        data["ementa"] = this.ementa;
        data["cursoId"] = this.cursoId;
        return data;
    }
}

export interface IDisciplinaObterPorIdDto {
    id?: number;
    nome?: string | undefined;
    codigo?: string | undefined;
    cargaHoraria?: number;
    ementa?: string | undefined;
    cursoId?: number;
}

export class PaginatedListOfDisciplinaObterDto implements IPaginatedListOfDisciplinaObterDto {
    items?: DisciplinaObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfDisciplinaObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DisciplinaObterDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfDisciplinaObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfDisciplinaObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfDisciplinaObterDto {
    items?: DisciplinaObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class DisciplinaObterDto implements IDisciplinaObterDto {
    id?: number;
    nome?: string | undefined;
    codigo?: string | undefined;
    cargaHoraria?: number;
    ementa?: string | undefined;
    cursoId?: number;
    cursoNome?: string | undefined;

    constructor(data?: IDisciplinaObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.codigo = _data["codigo"];
            this.cargaHoraria = _data["cargaHoraria"];
            this.ementa = _data["ementa"];
            this.cursoId = _data["cursoId"];
            this.cursoNome = _data["cursoNome"];
        }
    }

    static fromJS(data: any): DisciplinaObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new DisciplinaObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["codigo"] = this.codigo;
        data["cargaHoraria"] = this.cargaHoraria;
        data["ementa"] = this.ementa;
        data["cursoId"] = this.cursoId;
        data["cursoNome"] = this.cursoNome;
        return data;
    }
}

export interface IDisciplinaObterDto {
    id?: number;
    nome?: string | undefined;
    codigo?: string | undefined;
    cargaHoraria?: number;
    ementa?: string | undefined;
    cursoId?: number;
    cursoNome?: string | undefined;
}

export class DisciplinaObterQuery extends QueryRequestBase implements IDisciplinaObterQuery {
    id?: number | undefined;
    nome?: string | undefined;
    codigo?: string | undefined;
    cargaHoraria?: number | undefined;
    cursoId?: number | undefined;
    alunoId?: number | undefined;

    constructor(data?: IDisciplinaObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.codigo = _data["codigo"];
            this.cargaHoraria = _data["cargaHoraria"];
            this.cursoId = _data["cursoId"];
            this.alunoId = _data["alunoId"];
        }
    }

    static fromJS(data: any): DisciplinaObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new DisciplinaObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["codigo"] = this.codigo;
        data["cargaHoraria"] = this.cargaHoraria;
        data["cursoId"] = this.cursoId;
        data["alunoId"] = this.alunoId;
        super.toJSON(data);
        return data;
    }
}

export interface IDisciplinaObterQuery extends IQueryRequestBase {
    id?: number | undefined;
    nome?: string | undefined;
    codigo?: string | undefined;
    cargaHoraria?: number | undefined;
    cursoId?: number | undefined;
    alunoId?: number | undefined;
}

export class MatriculaRealizarCommand implements IMatriculaRealizarCommand {
    alunoId?: number;
    turmaId?: number;

    constructor(data?: IMatriculaRealizarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.alunoId = _data["alunoId"];
            this.turmaId = _data["turmaId"];
        }
    }

    static fromJS(data: any): MatriculaRealizarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new MatriculaRealizarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alunoId"] = this.alunoId;
        data["turmaId"] = this.turmaId;
        return data;
    }
}

export interface IMatriculaRealizarCommand {
    alunoId?: number;
    turmaId?: number;
}

export class MatriculaObterPorIdDto implements IMatriculaObterPorIdDto {
    id?: number;
    alunoId?: number;
    alunoNome?: string | undefined;
    alunoMatricula?: string | undefined;
    turmaId?: number;
    turmaNome?: string | undefined;
    disciplinaNome?: string | undefined;
    professorNome?: string | undefined;
    semestreAno?: number;
    semestrePeriodo?: number;

    constructor(data?: IMatriculaObterPorIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.alunoId = _data["alunoId"];
            this.alunoNome = _data["alunoNome"];
            this.alunoMatricula = _data["alunoMatricula"];
            this.turmaId = _data["turmaId"];
            this.turmaNome = _data["turmaNome"];
            this.disciplinaNome = _data["disciplinaNome"];
            this.professorNome = _data["professorNome"];
            this.semestreAno = _data["semestreAno"];
            this.semestrePeriodo = _data["semestrePeriodo"];
        }
    }

    static fromJS(data: any): MatriculaObterPorIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new MatriculaObterPorIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["alunoId"] = this.alunoId;
        data["alunoNome"] = this.alunoNome;
        data["alunoMatricula"] = this.alunoMatricula;
        data["turmaId"] = this.turmaId;
        data["turmaNome"] = this.turmaNome;
        data["disciplinaNome"] = this.disciplinaNome;
        data["professorNome"] = this.professorNome;
        data["semestreAno"] = this.semestreAno;
        data["semestrePeriodo"] = this.semestrePeriodo;
        return data;
    }
}

export interface IMatriculaObterPorIdDto {
    id?: number;
    alunoId?: number;
    alunoNome?: string | undefined;
    alunoMatricula?: string | undefined;
    turmaId?: number;
    turmaNome?: string | undefined;
    disciplinaNome?: string | undefined;
    professorNome?: string | undefined;
    semestreAno?: number;
    semestrePeriodo?: number;
}

export class PaginatedListOfMatriculaObterDto implements IPaginatedListOfMatriculaObterDto {
    items?: MatriculaObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfMatriculaObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MatriculaObterDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfMatriculaObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfMatriculaObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfMatriculaObterDto {
    items?: MatriculaObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class MatriculaObterDto implements IMatriculaObterDto {
    id?: number;
    alunoId?: number;
    alunoNome?: string | undefined;
    alunoMatricula?: string | undefined;
    turmaId?: number;
    turmaNome?: string | undefined;
    turmaDisciplinaNome?: string | undefined;
    turmaProfessorNome?: string | undefined;
    turmaSemestreAno?: number;
    turmaSemestrePeriodo?: number;

    constructor(data?: IMatriculaObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.alunoId = _data["alunoId"];
            this.alunoNome = _data["alunoNome"];
            this.alunoMatricula = _data["alunoMatricula"];
            this.turmaId = _data["turmaId"];
            this.turmaNome = _data["turmaNome"];
            this.turmaDisciplinaNome = _data["turmaDisciplinaNome"];
            this.turmaProfessorNome = _data["turmaProfessorNome"];
            this.turmaSemestreAno = _data["turmaSemestreAno"];
            this.turmaSemestrePeriodo = _data["turmaSemestrePeriodo"];
        }
    }

    static fromJS(data: any): MatriculaObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new MatriculaObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["alunoId"] = this.alunoId;
        data["alunoNome"] = this.alunoNome;
        data["alunoMatricula"] = this.alunoMatricula;
        data["turmaId"] = this.turmaId;
        data["turmaNome"] = this.turmaNome;
        data["turmaDisciplinaNome"] = this.turmaDisciplinaNome;
        data["turmaProfessorNome"] = this.turmaProfessorNome;
        data["turmaSemestreAno"] = this.turmaSemestreAno;
        data["turmaSemestrePeriodo"] = this.turmaSemestrePeriodo;
        return data;
    }
}

export interface IMatriculaObterDto {
    id?: number;
    alunoId?: number;
    alunoNome?: string | undefined;
    alunoMatricula?: string | undefined;
    turmaId?: number;
    turmaNome?: string | undefined;
    turmaDisciplinaNome?: string | undefined;
    turmaProfessorNome?: string | undefined;
    turmaSemestreAno?: number;
    turmaSemestrePeriodo?: number;
}

export class MatriculaObterQuery extends QueryRequestBase implements IMatriculaObterQuery {
    id?: number | undefined;
    alunoId?: number | undefined;
    turmaId?: number | undefined;
    disciplinaId?: number | undefined;
    professorId?: number | undefined;
    semestreAno?: number | undefined;
    semestrePeriodo?: number | undefined;

    constructor(data?: IMatriculaObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.alunoId = _data["alunoId"];
            this.turmaId = _data["turmaId"];
            this.disciplinaId = _data["disciplinaId"];
            this.professorId = _data["professorId"];
            this.semestreAno = _data["semestreAno"];
            this.semestrePeriodo = _data["semestrePeriodo"];
        }
    }

    static fromJS(data: any): MatriculaObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new MatriculaObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["alunoId"] = this.alunoId;
        data["turmaId"] = this.turmaId;
        data["disciplinaId"] = this.disciplinaId;
        data["professorId"] = this.professorId;
        data["semestreAno"] = this.semestreAno;
        data["semestrePeriodo"] = this.semestrePeriodo;
        super.toJSON(data);
        return data;
    }
}

export interface IMatriculaObterQuery extends IQueryRequestBase {
    id?: number | undefined;
    alunoId?: number | undefined;
    turmaId?: number | undefined;
    disciplinaId?: number | undefined;
    professorId?: number | undefined;
    semestreAno?: number | undefined;
    semestrePeriodo?: number | undefined;
}

export class NotaSalvarCommand implements INotaSalvarCommand {
    id?: number | undefined;
    avaliacaoId?: number;
    matriculaId?: number;
    valor?: number;

    constructor(data?: INotaSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.avaliacaoId = _data["avaliacaoId"];
            this.matriculaId = _data["matriculaId"];
            this.valor = _data["valor"];
        }
    }

    static fromJS(data: any): NotaSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new NotaSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["avaliacaoId"] = this.avaliacaoId;
        data["matriculaId"] = this.matriculaId;
        data["valor"] = this.valor;
        return data;
    }
}

export interface INotaSalvarCommand {
    id?: number | undefined;
    avaliacaoId?: number;
    matriculaId?: number;
    valor?: number;
}

export class NotaObterPorIdDto implements INotaObterPorIdDto {
    id?: number;
    avaliacaoId?: number;
    matriculaId?: number;
    valor?: number;

    constructor(data?: INotaObterPorIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.avaliacaoId = _data["avaliacaoId"];
            this.matriculaId = _data["matriculaId"];
            this.valor = _data["valor"];
        }
    }

    static fromJS(data: any): NotaObterPorIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotaObterPorIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["avaliacaoId"] = this.avaliacaoId;
        data["matriculaId"] = this.matriculaId;
        data["valor"] = this.valor;
        return data;
    }
}

export interface INotaObterPorIdDto {
    id?: number;
    avaliacaoId?: number;
    matriculaId?: number;
    valor?: number;
}

export class PaginatedListOfNotaObterDto implements IPaginatedListOfNotaObterDto {
    items?: NotaObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfNotaObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(NotaObterDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfNotaObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfNotaObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfNotaObterDto {
    items?: NotaObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class NotaObterDto implements INotaObterDto {
    id?: number;
    avaliacaoId?: number;
    matriculaId?: number;
    valor?: number;

    constructor(data?: INotaObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.avaliacaoId = _data["avaliacaoId"];
            this.matriculaId = _data["matriculaId"];
            this.valor = _data["valor"];
        }
    }

    static fromJS(data: any): NotaObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotaObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["avaliacaoId"] = this.avaliacaoId;
        data["matriculaId"] = this.matriculaId;
        data["valor"] = this.valor;
        return data;
    }
}

export interface INotaObterDto {
    id?: number;
    avaliacaoId?: number;
    matriculaId?: number;
    valor?: number;
}

export class NotaObterQuery extends QueryRequestBase implements INotaObterQuery {
    avaliacaoId?: number | undefined;
    matriculaId?: number | undefined;

    constructor(data?: INotaObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.avaliacaoId = _data["avaliacaoId"];
            this.matriculaId = _data["matriculaId"];
        }
    }

    static fromJS(data: any): NotaObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new NotaObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["avaliacaoId"] = this.avaliacaoId;
        data["matriculaId"] = this.matriculaId;
        super.toJSON(data);
        return data;
    }
}

export interface INotaObterQuery extends IQueryRequestBase {
    avaliacaoId?: number | undefined;
    matriculaId?: number | undefined;
}

export class ProfessorSalvarCommand implements IProfessorSalvarCommand {
    id?: number | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    especializacao?: Especializacao;
    usuarioId?: number | undefined;
    departamentoId?: number;

    constructor(data?: IProfessorSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.cpf = _data["cpf"];
            this.especializacao = _data["especializacao"];
            this.usuarioId = _data["usuarioId"];
            this.departamentoId = _data["departamentoId"];
        }
    }

    static fromJS(data: any): ProfessorSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessorSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["cpf"] = this.cpf;
        data["especializacao"] = this.especializacao;
        data["usuarioId"] = this.usuarioId;
        data["departamentoId"] = this.departamentoId;
        return data;
    }
}

export interface IProfessorSalvarCommand {
    id?: number | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    especializacao?: Especializacao;
    usuarioId?: number | undefined;
    departamentoId?: number;
}

export enum Especializacao {
    Graduacao = 0,
    Mestrado = 1,
    Doutorado = 2,
}

export class ProfessorObterPorIdDto implements IProfessorObterPorIdDto {
    id?: number;
    nome?: string | undefined;
    cpf?: string | undefined;
    especializacao?: Especializacao;
    usuarioId?: number | undefined;
    departamentoId?: number;

    constructor(data?: IProfessorObterPorIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.cpf = _data["cpf"];
            this.especializacao = _data["especializacao"];
            this.usuarioId = _data["usuarioId"];
            this.departamentoId = _data["departamentoId"];
        }
    }

    static fromJS(data: any): ProfessorObterPorIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessorObterPorIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["cpf"] = this.cpf;
        data["especializacao"] = this.especializacao;
        data["usuarioId"] = this.usuarioId;
        data["departamentoId"] = this.departamentoId;
        return data;
    }
}

export interface IProfessorObterPorIdDto {
    id?: number;
    nome?: string | undefined;
    cpf?: string | undefined;
    especializacao?: Especializacao;
    usuarioId?: number | undefined;
    departamentoId?: number;
}

export class PaginatedListOfProfessorObterDto implements IPaginatedListOfProfessorObterDto {
    items?: ProfessorObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfProfessorObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ProfessorObterDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfProfessorObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfProfessorObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfProfessorObterDto {
    items?: ProfessorObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class ProfessorObterDto implements IProfessorObterDto {
    id?: number;
    nome?: string | undefined;
    cpf?: string | undefined;
    especializacao?: Especializacao;
    usuarioId?: number | undefined;
    departamentoId?: number;
    departamentoNome?: string | undefined;

    constructor(data?: IProfessorObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.cpf = _data["cpf"];
            this.especializacao = _data["especializacao"];
            this.usuarioId = _data["usuarioId"];
            this.departamentoId = _data["departamentoId"];
            this.departamentoNome = _data["departamentoNome"];
        }
    }

    static fromJS(data: any): ProfessorObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessorObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["cpf"] = this.cpf;
        data["especializacao"] = this.especializacao;
        data["usuarioId"] = this.usuarioId;
        data["departamentoId"] = this.departamentoId;
        data["departamentoNome"] = this.departamentoNome;
        return data;
    }
}

export interface IProfessorObterDto {
    id?: number;
    nome?: string | undefined;
    cpf?: string | undefined;
    especializacao?: Especializacao;
    usuarioId?: number | undefined;
    departamentoId?: number;
    departamentoNome?: string | undefined;
}

export class ProfessorObterQuery extends QueryRequestBase implements IProfessorObterQuery {
    id?: number | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    especializacao?: Especializacao | undefined;
    usuarioId?: number | undefined;
    departamentoId?: number | undefined;

    constructor(data?: IProfessorObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.cpf = _data["cpf"];
            this.especializacao = _data["especializacao"];
            this.usuarioId = _data["usuarioId"];
            this.departamentoId = _data["departamentoId"];
        }
    }

    static fromJS(data: any): ProfessorObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessorObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["cpf"] = this.cpf;
        data["especializacao"] = this.especializacao;
        data["usuarioId"] = this.usuarioId;
        data["departamentoId"] = this.departamentoId;
        super.toJSON(data);
        return data;
    }
}

export interface IProfessorObterQuery extends IQueryRequestBase {
    id?: number | undefined;
    nome?: string | undefined;
    cpf?: string | undefined;
    especializacao?: Especializacao | undefined;
    usuarioId?: number | undefined;
    departamentoId?: number | undefined;
}

export class SelectItemEnum implements ISelectItemEnum {
    id?: number;
    text?: string | undefined;

    constructor(data?: ISelectItemEnum) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): SelectItemEnum {
        data = typeof data === 'object' ? data : {};
        let result = new SelectItemEnum();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["text"] = this.text;
        return data;
    }
}

export interface ISelectItemEnum {
    id?: number;
    text?: string | undefined;
}

export class TurmaSalvarCommand implements ITurmaSalvarCommand {
    id?: number | undefined;
    disciplinaId?: number;
    professorId?: number;
    semestreAno?: number;
    semestrePeriodo?: number;
    nome?: string | undefined;

    constructor(data?: ITurmaSalvarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.disciplinaId = _data["disciplinaId"];
            this.professorId = _data["professorId"];
            this.semestreAno = _data["semestreAno"];
            this.semestrePeriodo = _data["semestrePeriodo"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): TurmaSalvarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new TurmaSalvarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["disciplinaId"] = this.disciplinaId;
        data["professorId"] = this.professorId;
        data["semestreAno"] = this.semestreAno;
        data["semestrePeriodo"] = this.semestrePeriodo;
        data["nome"] = this.nome;
        return data;
    }
}

export interface ITurmaSalvarCommand {
    id?: number | undefined;
    disciplinaId?: number;
    professorId?: number;
    semestreAno?: number;
    semestrePeriodo?: number;
    nome?: string | undefined;
}

export class TurmaObterPorIdDto implements ITurmaObterPorIdDto {
    id?: number;
    disciplinaId?: number;
    professorId?: number;
    semestreAno?: number;
    semestrePeriodo?: number;
    nome?: string | undefined;

    constructor(data?: ITurmaObterPorIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.disciplinaId = _data["disciplinaId"];
            this.professorId = _data["professorId"];
            this.semestreAno = _data["semestreAno"];
            this.semestrePeriodo = _data["semestrePeriodo"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): TurmaObterPorIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new TurmaObterPorIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["disciplinaId"] = this.disciplinaId;
        data["professorId"] = this.professorId;
        data["semestreAno"] = this.semestreAno;
        data["semestrePeriodo"] = this.semestrePeriodo;
        data["nome"] = this.nome;
        return data;
    }
}

export interface ITurmaObterPorIdDto {
    id?: number;
    disciplinaId?: number;
    professorId?: number;
    semestreAno?: number;
    semestrePeriodo?: number;
    nome?: string | undefined;
}

export class PaginatedListOfTurmaObterDto implements IPaginatedListOfTurmaObterDto {
    items?: TurmaObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfTurmaObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TurmaObterDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfTurmaObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfTurmaObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfTurmaObterDto {
    items?: TurmaObterDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class TurmaObterDto implements ITurmaObterDto {
    id?: number;
    disciplinaId?: number;
    disciplinaNome?: string | undefined;
    professorId?: number;
    professorNome?: string | undefined;
    semestreAno?: number;
    semestrePeriodo?: number;
    nome?: string | undefined;

    constructor(data?: ITurmaObterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.disciplinaId = _data["disciplinaId"];
            this.disciplinaNome = _data["disciplinaNome"];
            this.professorId = _data["professorId"];
            this.professorNome = _data["professorNome"];
            this.semestreAno = _data["semestreAno"];
            this.semestrePeriodo = _data["semestrePeriodo"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): TurmaObterDto {
        data = typeof data === 'object' ? data : {};
        let result = new TurmaObterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["disciplinaId"] = this.disciplinaId;
        data["disciplinaNome"] = this.disciplinaNome;
        data["professorId"] = this.professorId;
        data["professorNome"] = this.professorNome;
        data["semestreAno"] = this.semestreAno;
        data["semestrePeriodo"] = this.semestrePeriodo;
        data["nome"] = this.nome;
        return data;
    }
}

export interface ITurmaObterDto {
    id?: number;
    disciplinaId?: number;
    disciplinaNome?: string | undefined;
    professorId?: number;
    professorNome?: string | undefined;
    semestreAno?: number;
    semestrePeriodo?: number;
    nome?: string | undefined;
}

export class TurmaObterQuery extends QueryRequestBase implements ITurmaObterQuery {
    id?: number | undefined;
    disciplinaId?: number | undefined;
    professorId?: number | undefined;
    semestreAno?: number | undefined;
    semestrePeriodo?: number | undefined;
    nome?: string | undefined;

    constructor(data?: ITurmaObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.disciplinaId = _data["disciplinaId"];
            this.professorId = _data["professorId"];
            this.semestreAno = _data["semestreAno"];
            this.semestrePeriodo = _data["semestrePeriodo"];
            this.nome = _data["nome"];
        }
    }

    static fromJS(data: any): TurmaObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new TurmaObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["disciplinaId"] = this.disciplinaId;
        data["professorId"] = this.professorId;
        data["semestreAno"] = this.semestreAno;
        data["semestrePeriodo"] = this.semestrePeriodo;
        data["nome"] = this.nome;
        super.toJSON(data);
        return data;
    }
}

export interface ITurmaObterQuery extends IQueryRequestBase {
    id?: number | undefined;
    disciplinaId?: number | undefined;
    professorId?: number | undefined;
    semestreAno?: number | undefined;
    semestrePeriodo?: number | undefined;
    nome?: string | undefined;
}

export class UsuarioDto implements IUsuarioDto {
    id?: number;
    login?: string | undefined;
    senha?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    telefone?: string | undefined;
    tipo?: TipoUsuario;
    administrador?: boolean;
    administradorString?: string | undefined;
    alunoId?: number | undefined;
    alunoCursoId?: number | undefined;
    professorId?: number | undefined;

    constructor(data?: IUsuarioDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.senha = _data["senha"];
            this.nome = _data["nome"];
            this.email = _data["email"];
            this.telefone = _data["telefone"];
            this.tipo = _data["tipo"];
            this.administrador = _data["administrador"];
            this.administradorString = _data["administradorString"];
            this.alunoId = _data["alunoId"];
            this.alunoCursoId = _data["alunoCursoId"];
            this.professorId = _data["professorId"];
        }
    }

    static fromJS(data: any): UsuarioDto {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["senha"] = this.senha;
        data["nome"] = this.nome;
        data["email"] = this.email;
        data["telefone"] = this.telefone;
        data["tipo"] = this.tipo;
        data["administrador"] = this.administrador;
        data["administradorString"] = this.administradorString;
        data["alunoId"] = this.alunoId;
        data["alunoCursoId"] = this.alunoCursoId;
        data["professorId"] = this.professorId;
        return data;
    }
}

export interface IUsuarioDto {
    id?: number;
    login?: string | undefined;
    senha?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    telefone?: string | undefined;
    tipo?: TipoUsuario;
    administrador?: boolean;
    administradorString?: string | undefined;
    alunoId?: number | undefined;
    alunoCursoId?: number | undefined;
    professorId?: number | undefined;
}

export enum TipoUsuario {
    Administrador = 0,
    Professor = 1,
    Aluno = 2,
}

export class PaginatedListOfUsuarioDto implements IPaginatedListOfUsuarioDto {
    items?: UsuarioDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfUsuarioDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UsuarioDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfUsuarioDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfUsuarioDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfUsuarioDto {
    items?: UsuarioDto[] | undefined;
    pageIndex?: number;
    pageSize?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class UsuarioObterQuery extends QueryRequestBase implements IUsuarioObterQuery {
    id?: number | undefined;
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    telefone?: string | undefined;
    administrador?: boolean | undefined;
    grupoId?: number | undefined;
    tipo?: TipoUsuario | undefined;

    constructor(data?: IUsuarioObterQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.email = _data["email"];
            this.telefone = _data["telefone"];
            this.administrador = _data["administrador"];
            this.grupoId = _data["grupoId"];
            this.tipo = _data["tipo"];
        }
    }

    static fromJS(data: any): UsuarioObterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioObterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["email"] = this.email;
        data["telefone"] = this.telefone;
        data["administrador"] = this.administrador;
        data["grupoId"] = this.grupoId;
        data["tipo"] = this.tipo;
        super.toJSON(data);
        return data;
    }
}

export interface IUsuarioObterQuery extends IQueryRequestBase {
    id?: number | undefined;
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    telefone?: string | undefined;
    administrador?: boolean | undefined;
    grupoId?: number | undefined;
    tipo?: TipoUsuario | undefined;
}

export class UsuarioCriarCommand implements IUsuarioCriarCommand {
    login?: string | undefined;
    senha?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    tipo?: TipoUsuario;
    alunoId?: number | undefined;
    professorId?: number | undefined;

    constructor(data?: IUsuarioCriarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.senha = _data["senha"];
            this.nome = _data["nome"];
            this.email = _data["email"];
            this.tipo = _data["tipo"];
            this.alunoId = _data["alunoId"];
            this.professorId = _data["professorId"];
        }
    }

    static fromJS(data: any): UsuarioCriarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioCriarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["senha"] = this.senha;
        data["nome"] = this.nome;
        data["email"] = this.email;
        data["tipo"] = this.tipo;
        data["alunoId"] = this.alunoId;
        data["professorId"] = this.professorId;
        return data;
    }
}

export interface IUsuarioCriarCommand {
    login?: string | undefined;
    senha?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    tipo?: TipoUsuario;
    alunoId?: number | undefined;
    professorId?: number | undefined;
}

export class UsuarioAlterarCommand implements IUsuarioAlterarCommand {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    senha?: string | undefined;
    tipo?: TipoUsuario;
    alunoId?: number | undefined;
    professorId?: number | undefined;

    constructor(data?: IUsuarioAlterarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.nome = _data["nome"];
            this.email = _data["email"];
            this.senha = _data["senha"];
            this.tipo = _data["tipo"];
            this.alunoId = _data["alunoId"];
            this.professorId = _data["professorId"];
        }
    }

    static fromJS(data: any): UsuarioAlterarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioAlterarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["nome"] = this.nome;
        data["email"] = this.email;
        data["senha"] = this.senha;
        data["tipo"] = this.tipo;
        data["alunoId"] = this.alunoId;
        data["professorId"] = this.professorId;
        return data;
    }
}

export interface IUsuarioAlterarCommand {
    id?: number;
    login?: string | undefined;
    nome?: string | undefined;
    email?: string | undefined;
    senha?: string | undefined;
    tipo?: TipoUsuario;
    alunoId?: number | undefined;
    professorId?: number | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}